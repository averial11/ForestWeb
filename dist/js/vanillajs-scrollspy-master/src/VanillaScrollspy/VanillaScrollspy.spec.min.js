"use strict";var _index=_interopRequireDefault(require("./index")),_htmlMock=require("../utils/htmlMock");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var scrollToSpy=jest.fn();window.scrollTo=scrollToSpy,describe("VanillaScrollspy",function(){var e=null,n=null,t=null;beforeEach(function(){document.addEventListener=jest.fn().mockImplementationOnce(function(e,n){n()}),document.body.innerHTML=(0,_htmlMock.renderHTML)(),e=document.querySelector("#navbar"),n=document.querySelector('a[href="#home"]'),t=document.querySelector('a[href="#about"]')}),afterEach(function(){document.body.innerHTML=""}),it("should create an instance of VanillaScrollspy",function(){(0,_index.default)({menu:e}).init(),expect(scrollToSpy).not.toHaveBeenCalled()}),describe("when receiving `easing` param",function(){describe("and value is `easeOutSine`",function(){it("should call scroll event",function(){(0,_index.default)({menu:e,speed:1e3,easing:"easeOutSine"}).init(),n.click(),expect(scrollToSpy).toHaveBeenCalled(),expect(document.addEventListener).toBeCalledWith("scroll",expect.any(Function))})}),describe("and value is `easeInOutSine`",function(){it("should call scroll event",function(){(0,_index.default)({menu:e,speed:1e3,easing:"easeInOutSine"}).init(),n.click(),expect(scrollToSpy).toHaveBeenCalled(),expect(document.addEventListener).toBeCalledWith("scroll",expect.any(Function))})}),describe("and value is `easeInOutQuint`",function(){it("should call scroll event",function(){(0,_index.default)({menu:e,speed:1e3,easing:"easeInOutQuint"}).init(),t.click(),expect(scrollToSpy).toHaveBeenCalled(),expect(document.addEventListener).toBeCalledWith("scroll",expect.any(Function))})})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbmlsbGFqcy1zY3JvbGxzcHktbWFzdGVyL3NyYy9WYW5pbGxhU2Nyb2xsc3B5L1ZhbmlsbGFTY3JvbGxzcHkuc3BlYy5qcyJdLCJuYW1lcyI6WyJfaW5kZXgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9odG1sTW9jayIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZm4iLCJ3aW5kb3ciLCJzY3JvbGxUbyIsImRlc2NyaWJlIiwibWVudSIsIiRob21lTGluayIsImJlZm9yZUVhY2giLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJqZXN0IiwiY2FsbGJhY2siLCJtb2NrSW1wbGVtZW50YXRpb25PbmNlIiwiZXZlbnQiLCIkYWJvdXRMaW5rIiwicXVlcnlTZWxlY3RvciIsImFmdGVyRWFjaCIsImJvZHkiLCJpbm5lckhUTUwiLCJpdCIsIlZhbmlsbGFTY3JvbGxzcHkiLCJpbml0IiwiZXhwZWN0Iiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsInNjcm9sbHNweSIsInNwZWVkIiwiZWFzaW5nIiwidG9CZUNhbGxlZFdpdGgiLCJhbnkiLCJjbGljayIsInNjcm9sbFRvU3B5IiwiRnVuY3Rpb24iXSwibWFwcGluZ3MiOiJhQUFBLElBQUFBLE9BQUFDLHVCQUFBQyxRQUFBLFNBQUEsQ0FBQSxFQUNBQyxVQUFBRCxRQUFBLG1CQUFBLEVBQThDLFNBQUFELHVCQUFBRyxHQUFBLE9BQUFBLEdBQUFBLEVBQUFDLFdBQUFELEVBQUEsQ0FBQUUsUUFBQUYsQ0FBQSxDQUFBLENBQTlDLElBQUFELFlBQUFELEtBQUFLLEdBQUEsRUFBOENDLE9BQUFDLFNBQUFSLFlBRzlDTyxTQUFPQyxtQkFBc0IsV0FFN0JDLElBQUFBLEVBQVMsS0FDSEMsRUFBVyxLQUNYQyxFQUFZLEtBR2hCQyxXQUFXLFdBQ1RDLFNBQVNDLGlCQUFtQkMsS0FHeEJDLEdBQUFBLEVBQ0FDLHVCQUFBLFNBQUFDLEVBQUFGLEdBRUpILEVBQWEsQ0FFYkgsQ0FBQUEsRUFFQVMsU0FBQUEsS0FBYU4sV0FBU08sRUFBQUEsVUFBQUEsWUFBYyxFQUd0Q0MsRUFBU1IsU0FBQ08sY0FBTSxTQUFBLEVBQ2RQLEVBQVNTLFNBQUtDLGNBQWMsaUJBQUEsRUFDNUJKLEVBQUFOLFNBQUFPLGNBQUEsa0JBQUEsQ0FFRkksQ0FBQUEsRUFKQUgsVUFLdUNYLFdBQUtHLFNBQUVTLEtBQUFDLFVBQUEsRUFIOUMsQ0FBQyxFQVFEQyxHQUFFLGdEQUFBLFlBRU8sRUFBQUMsT0FBQUEsU0FBQSxDQUFBZixLQUFBQSxDQUFpQyxDQUFBLEVBRW5DZ0IsS0FBQSxFQUxMQyxPQU9NakIsV0FBSSxFQUFBa0IsSUFBQUMsaUJBQUEsQ0FOWixDQUFDLEVBRURwQixTQU9RLGdDQUFBLFdBTk5BLFNBUUlxQiw2QkFBZ0IsV0FQbEJOLEdBUUViLDJCQUFpQixZQUVDLEVBQUFjLE9BQUFBLFNBQUVJLENBQ3BCRixLQUFBQSxFQUlBSSxNQUFBLElBQ0ZDLE9BQUEsYUFFRnZCLENBQUFBLEVBRVVxQixLQUFTLEVBWmZuQixFQWFFRCxNQUFJLEVBWE5pQixPQWFFSyxXQUFRLEVBQUFILGlCQUFBLEVBQ1ZGLE9BQUVkLFNBQUFDLGdCQUFBLEVBQUFtQixlQUVGSCxTQUNBbkIsT0FBU3VCLElBQUNDLFFBQU8sQ0FFakJSLENBZEYsQ0FBQyxDQUNILENBQUMsRUFxQkRsQixTQUFTLCtCQUErQixXQUN0Q2UsR0FBRywyQkFBNEIsWUFDWCxFQUFBQyxPQUFBQSxTQUFBQSxDQUNoQmYsS0FBQUEsRUFDQXFCLE1BQU8sSUFDUEMsT0FBUSxlQUNWLENBQUMsRUFHU04sS0FBQ1MsRUFFWFIsRUFBT1MsTUFBQUEsRUFLUFQsT0FBQVMsV0FBQSxFQUFBUCxpQkFBQSxFQUNGRixPQUFBZCxTQUFBQyxnQkFBQSxFQUFBbUIsZUFDRixTQUNGTixPQUFBTyxJQUFBRyxRQUFBLENBdkJNLENBQ0YsQ0FBQyxDQUNILENBQUMsRUFFRDVCLFNBQVMsZ0NBQWlDLFdBQ3hDZSxHQUFHLDJCQUE0QixZQUNYLEVBQUFDLE9BQUFBLFNBQWlCLENBQ2pDZixLQUFBQSxFQUNBcUIsTUFBTyxJQUNQQyxPQUFRLGdCQUNWLENBQUMsRUFFU04sS0FBSyxFQUNmUCxFQUFXZ0IsTUFBTSxFQUVqQlIsT0FBT1MsV0FBVyxFQUFFUCxpQkFBaUIsRUFDckNGLE9BQU9kLFNBQVNDLGdCQUFnQixFQUFFbUIsZUFDaEMsU0FDQU4sT0FBT08sSUFBSUcsUUFBUSxDQUNyQixDQUNGLENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FBQyxDQUNILENBQUMiLCJmaWxlIjoidmFuaWxsYWpzLXNjcm9sbHNweS1tYXN0ZXIvc3JjL1ZhbmlsbGFTY3JvbGxzcHkvVmFuaWxsYVNjcm9sbHNweS5zcGVjLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWYW5pbGxhU2Nyb2xsc3B5IGZyb20gJy4vaW5kZXgnXG5pbXBvcnQgeyByZW5kZXJIVE1MIH0gZnJvbSAnLi4vdXRpbHMvaHRtbE1vY2snXG5cbmNvbnN0IHNjcm9sbFRvU3B5ID0gamVzdC5mbigpXG53aW5kb3cuc2Nyb2xsVG8gPSBzY3JvbGxUb1NweVxuXG5kZXNjcmliZSgnVmFuaWxsYVNjcm9sbHNweScsICgpID0+IHtcbiAgbGV0IG1lbnUgPSBudWxsXG4gIGxldCAkaG9tZUxpbmsgPSBudWxsXG4gIGxldCAkYWJvdXRMaW5rID0gbnVsbFxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPSBqZXN0XG4gICAgICAuZm4oKVxuICAgICAgLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKGV2ZW50LCBjYWxsYmFjaykgPT4ge1xuICAgICAgICBjYWxsYmFjaygpXG4gICAgICB9KVxuXG4gICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSByZW5kZXJIVE1MKClcblxuICAgIG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmF2YmFyJylcbiAgICAkaG9tZUxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdhW2hyZWY9XCIjaG9tZVwiXScpXG4gICAgJGFib3V0TGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZj1cIiNhYm91dFwiXScpXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgVmFuaWxsYVNjcm9sbHNweScsICgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxzcHkgPSBWYW5pbGxhU2Nyb2xsc3B5KHsgbWVudSB9KVxuXG4gICAgc2Nyb2xsc3B5LmluaXQoKVxuXG4gICAgZXhwZWN0KHNjcm9sbFRvU3B5KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ3doZW4gcmVjZWl2aW5nIGBlYXNpbmdgIHBhcmFtJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdhbmQgdmFsdWUgaXMgYGVhc2VPdXRTaW5lYCcsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgY2FsbCBzY3JvbGwgZXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNjcm9sbHNweSA9IFZhbmlsbGFTY3JvbGxzcHkoe1xuICAgICAgICAgIG1lbnUsXG4gICAgICAgICAgc3BlZWQ6IDEwMDAsXG4gICAgICAgICAgZWFzaW5nOiAnZWFzZU91dFNpbmUnXG4gICAgICAgIH0pXG5cbiAgICAgICAgc2Nyb2xsc3B5LmluaXQoKVxuICAgICAgICAkaG9tZUxpbmsuY2xpY2soKVxuXG4gICAgICAgIGV4cGVjdChzY3JvbGxUb1NweSkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgICAgIGV4cGVjdChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKS50b0JlQ2FsbGVkV2l0aChcbiAgICAgICAgICAnc2Nyb2xsJyxcbiAgICAgICAgICBleHBlY3QuYW55KEZ1bmN0aW9uKVxuICAgICAgICApXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnYW5kIHZhbHVlIGlzIGBlYXNlSW5PdXRTaW5lYCcsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgY2FsbCBzY3JvbGwgZXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNjcm9sbHNweSA9IFZhbmlsbGFTY3JvbGxzcHkoe1xuICAgICAgICAgIG1lbnUsXG4gICAgICAgICAgc3BlZWQ6IDEwMDAsXG4gICAgICAgICAgZWFzaW5nOiAnZWFzZUluT3V0U2luZSdcbiAgICAgICAgfSlcblxuICAgICAgICBzY3JvbGxzcHkuaW5pdCgpXG4gICAgICAgICRob21lTGluay5jbGljaygpXG5cbiAgICAgICAgZXhwZWN0KHNjcm9sbFRvU3B5KS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgICAgZXhwZWN0KGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpLnRvQmVDYWxsZWRXaXRoKFxuICAgICAgICAgICdzY3JvbGwnLFxuICAgICAgICAgIGV4cGVjdC5hbnkoRnVuY3Rpb24pXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGRlc2NyaWJlKCdhbmQgdmFsdWUgaXMgYGVhc2VJbk91dFF1aW50YCcsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgY2FsbCBzY3JvbGwgZXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNjcm9sbHNweSA9IFZhbmlsbGFTY3JvbGxzcHkoe1xuICAgICAgICAgIG1lbnUsXG4gICAgICAgICAgc3BlZWQ6IDEwMDAsXG4gICAgICAgICAgZWFzaW5nOiAnZWFzZUluT3V0UXVpbnQnXG4gICAgICAgIH0pXG5cbiAgICAgICAgc2Nyb2xsc3B5LmluaXQoKVxuICAgICAgICAkYWJvdXRMaW5rLmNsaWNrKClcblxuICAgICAgICBleHBlY3Qoc2Nyb2xsVG9TcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgICBleHBlY3QoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikudG9CZUNhbGxlZFdpdGgoXG4gICAgICAgICAgJ3Njcm9sbCcsXG4gICAgICAgICAgZXhwZWN0LmFueShGdW5jdGlvbilcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==
